#!/usr/bin/env python3

import shutil
from pathlib import Path, PurePath

colors = dict(
    red='\033[91m',
    green='\033[32m',
    yellow='\033[33m',
    blue='\033[34m',
    voilet='\033[35m',
    beige='\033[36m',
)


def colorful(text, color):
    text = str(text)
    END = '\033[0m'
    BOLD = '\033[1m'

    return colors.get(color, '') + BOLD + text + END


def to_removes():
    def cmd_args():
        import sys
        return sys.argv[1:]

    tmp = Path('/tmp')
    pwd = Path.cwd()
    # name, path, tmp_path
    for a in cmd_args():
        basename = Path(a).name
        yield basename, pwd.joinpath(a), tmp.joinpath(basename)


def yes_or_no(prompt):
    try:
        anser = input(f'{prompt} ([y]/n)? ').strip()
        if anser is '':
            anser = 'y'
        return anser
    except (KeyboardInterrupt, EOFError):
        # Catch multiple exceptions in one line (except block)
        # clear exit info
        import sys
        sys.exit('\nExiting and nothing happened.')


def if_you_do(name, path, tmp_path):
    a = yes_or_no(
        f'{colorful(tmp_path, "beige")} is existed! Are you sure to overwirte it')
    while True:
        if a not in ['y', 'n']:
            a = yes_or_no('There is nothing to do. Type agin')
        else:
            break
    return a


def main():
    for name, path, tmp_path in to_removes():
        # show the info of what will do.
        print(f"{colorful(path, 'red')} --> {colorful(tmp_path, 'green')}")

        if(tmp_path.exists()):
            anser = if_you_do(name, path, tmp_path)
            if anser == 'y':
                # wft? when I was using Path.rename, interpreter complained: /tmp is on a different filesystem
                # Using `df` to check it and then I said okay, so I need using shutil.move
                #
                if tmp_path.is_dir():
                    # a same-name dir already exists in the /tmp
                    shutil.rmtree(tmp_path)
                elif path.is_dir():
                    # to remove file is dirctory, but a file already exists with that name in the /tmp
                    # so delete the file which is in the /tmp
                    tmp_path.unlink()
                shutil.move(path, tmp_path)
        else:
            shutil.move(path, tmp_path)


if __name__ == "__main__":
    main()
